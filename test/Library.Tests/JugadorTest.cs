using Library;
using NUnit.Framework.Internal;


    [Test]
        void TestSeleccionarPokemons()
    {
        // Arrange
        Jugador jugadorAsh = new Jugador("Ash");

        // Simular entradas de usuario
        Queue<string> nombresDePokemonEntrada = new Queue<string>(new[] { "Pikachu", "Charmander", "Bulbasaur", "InvalidPokemon", "Charmander", "Squirtle" });

        // Funci√≥n de entrada simulada
        string ObtenerEntradaSimulada() => nombresDePokemonEntrada.Dequeue();

        // Act
        jugadorAsh.SeleccionarPokemons();

        // Assert
        Assert.AreEqual(3, jugadorAsh.ListPokemons.Count);
        Assert.AreEqual("Pikachu", jugadorAsh.ListPokemons[0].Name);
        Assert.AreEqual("Charmander", jugadorAsh.ListPokemons[1].Name);
        Assert.AreEqual("Bulbasaur", jugadorAsh.ListPokemons[2].Name);
    }
        
    
    [Test]
    void TestTomarDecision_Atacar()
    {
        // Arrange
        Jugador jugador = new Jugador("Ash");
        Pokemon propio = new Pokemon("Pikachu", 80, 45, "el√©ctrico", new List<IAtaque>());
        Pokemon oponente = new Pokemon("Bulbasaur", 85, 70, "planta", new List<IAtaque>());

        Queue<string> entradas = new Queue<string>(new[] { "1", "1" }); // Selecciona Atacar y luego Impactrueno
        string ObtenerEntradaSimulada() => entradas.Dequeue();

        // Act
        jugador.TomarDecision(propio, oponente);

        // Assert
        // Aqu√≠ deber√≠as verificar que el ataque se haya ejecutado correctamente.
        // Esto depender√° de la implementaci√≥n de la clase Ataque y el m√©todo Ejecutar.
    }

    [Test]
    void TestTomarDecision_UsarMochila()
    {
        // Arrange
        Jugador jugador = new Jugador("Ash");
        Pokemon propio = new Pokemon ("Pikachu", 80, 45, "el√©ctrico", new List<IAtaque>() ); // Sin ataques para simplificar
        Pokemon oponente = new Pokemon("Bulbasaur", 85, 70, "planta", new List<IAtaque>());

        Queue<string> entradas = new Queue<string>(new[] { "2", "üçÑ poci√≥n" }); // Selecciona Usar Mochila y luego Poci√≥n
        string ObtenerEntradaSimulada() => entradas.Dequeue();

        // Act
        jugador.TomarDecision(propio, oponente);

        // Assert
        // Aqu√≠ deber√≠as verificar que se haya utilizado el objeto correcto.
    }
    [Test] 
        void TestTomarDecision_CambiarPokemon()
    {
        // Arrange
        Jugador jugador = new Jugador("Ash");
        Pokemon propio = new Pokemon("Charmander", 70, 50, "fuego", new List<IAtaque>());
        Pokemon nuevoPokemon = new Pokemon("Pikachu", 80, 40, "el√©ctrico", new List<IAtaque>());

        // Simulamos la entrada para seleccionar "Cambiar Pok√©mon" (opci√≥n 3)
        Queue<string> entradas = new Queue<string>(new[] { "3" }); // Selecciona Cambiar Pok√©mon
        string entrada = entradas.Dequeue(); // Obtenemos la entrada

        // Agrega el nuevo Pok√©mon a la lista del jugador
        jugador.ListPokemons.Add(nuevoPokemon);
    
        // Act
        Console.SetIn(new StringReader(entrada)); // Simulamos la entrada del usuario
        jugador.TomarDecision(propio, null); // Oponente no es relevante en este caso

        // Assert
        Assert.IsFalse(propio.EnCombate, $"{propio.Name} deber√≠a haber salido de combate.");
        Assert.AreEqual(nuevoPokemon, jugador.ListPokemons[1], "El nuevo Pok√©mon deber√≠a ser Pikachu.");
    }


    [Test]
        void TestTienePokemonsDisponibles()
    {
        // Arrange
        Jugador jugador = new Jugador("Ash");

        // Caso 1: Con Pok√©mon vivos
        jugador.ListPokemons = new List<Pokemon>
        {
            new Pokemon("Pikachu", 80, 45, "el√©ctrico", new List<IAtaque>()),
            new Pokemon("Charmander", 70, 50, "fuego", new List<IAtaque>())
        };

        // Act y Assert para el caso de Pok√©mon vivos
        bool resultadoConVivos = jugador.TienePokemonsDisponibles();
        Assert.IsTrue(resultadoConVivos, "Se esperaba que el jugador tuviera Pok√©mon vivos.");

        // Caso 2: Sin Pok√©mon vivos
        jugador.ListPokemons[0] = new Pokemon("Pikachu", 0, 45, "el√©ctrico", new List<IAtaque>());
        jugador.ListPokemons[1] = new Pokemon("Charmander", 0, 50, "fuego", new List<IAtaque>());

        // Act y Assert para el caso de sin Pok√©mon vivos
        bool resultadoSinVivos = jugador.TienePokemonsDisponibles();
        Assert.IsFalse(resultadoSinVivos, "Se esperaba que el jugador no tuviera Pok√©mon vivos.");
    }


    [Test]
        void TestTienePokemonsDisponibles_SinPokemons()
    {
        // Arrange
        Jugador jugador = new Jugador("Ash");
        jugador.ListPokemons = new List<Pokemon>(); // Sin Pok√©mon

        // Act
        bool resultado = jugador.TienePokemonsDisponibles();

        // Assert
        Assert.IsFalse(resultado);
    }
    
